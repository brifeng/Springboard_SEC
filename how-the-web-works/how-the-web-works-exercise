Part One: Solidify Terminology
In your own terms, define the following terms:

What is HTTP?
Stands for hyper text transfer protocol, it is a standard guideline for how devices on a network communicate

What is a URL?
stands for uniform resource locator, which is a formula containing the protocol, hostname, and file name in a given web address

What is DNS?
it stands for domain name system, and it's a human/English way of writing an IP address to a website

What is a query string?
it is a part of a URL at the end to denote any extra information used in the webpage

What are two HTTP verbs and how are they different?
get - retrieve information from a webpage, but does not alter it in any way
post - publish information to a webpage, this is usually to create new content (via a form submission)

What is an HTTP request?
when you attempt to access a website through a web browser, it makes a request to the server containing the webpage

What is an HTTP response?
the response is how the server containing the website responds, the server decides how/what to respond with

What is an HTTP header? Give a couple examples of request and response headers you have seen.
a header is extra information given in an HTTP request and response, e.g. language, date/time,

What are the processes that happen when you type “http://somesite.com/some/page.html” into a browser?
the browser looks through the computer cache, router, ISP, and DNS servers to find a website with the address provided. if found, it will receive the response from the server, written in HTML, and construct a page for humans to view



Part Two: Practice Tools
Using curl, make a GET request to the icanhazdadjoke.com API to find all jokes involving the word “pirate”
curl https://icanhazdadjoke.com/search?term=pirate

Use dig to find what the IP address is for icanhazdadjoke.com
dig icanhazdadjoke.com
104.21.37.176
172.67.211.64

Make a simple web page and serve it using python3 -m http.server. Visit the page in a browser.


Part Three: Explore Dev Tools
Build a very simple HTML form that uses the GET method (it can use the same page URL for the action) when the form is submitted.

Add a field or two to the form and, after submitting it, explore in Chrome Developer tools how you can view the request and response headers.

Edit the page to change the form type to POST, refresh in the browser and re-submit. Do you still see the field in the query string? Explore in Chrome how you can view the request and response headers, as well as the form data.



Part Four: Explore the URL API
At times, it’s useful for your JavaScript to look at the URL of the browser window and change how the script works depending on parts of that (particularly the query string).

Read about the URL API

Try some of the code examples in the Chrome Console so that you can get comfortable with the basic methods and properties for instances of the URL class.